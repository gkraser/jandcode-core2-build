import jandcode.commons.*
import jandcode.commons.conf.*
import jandcode.core.jc.*
import jandcode.jc.*
import jandcode.jc.std.*

class P extends ProjectScript {

    ReleaseProject rp

    void onInclude() {
        project.name = "jandcode-core2-build-doc"
        //
        //include(RootProject)

        rp = include(ReleaseProject)

        rp.defaultCfg { Conf cfg ->
            cfg['repo/jandcode-core2/branch'] = "dev"
            cfg['repo/jandcode-core2-docs/branch'] = "dev"
            cfg['repo/jandcode-jsmodules/branch'] = "dev"
        }

        rp.repos.addRepo("https://github.com/gkraser/jandcode-core2")
        rp.repos.addRepo("https://github.com/gkraser/gkraser.github.io")
        rp.repos.addRepo("https://github.com/gkraser/jandcode-core2-docs")
        rp.repos.addRepo("https://github.com/gkraser/jandcode-jsmodules")
        //
    }

    @CmDef
    void step_create_jc_env() {
        if (UtFile.isWindows()) {
            def bat = create(BatBuilder)
            bat.addVar(
                    JAVA_HOME: rp.cfg['java.home'],
                    JC_RUN: "%~dp0\\jandcode-core2\\jc-run.bat",
            )
            bat.addPath("%JAVA_HOME%\\bin")
            bat.save(wd("${rp.repos.reposDir}/jc-env.bat"))
        } else {
            def s = """\
export JAVA_HOME=${rp.cfg['java.home']}
export JC_RUN=${rp.repos.getRepo("jandcode-core2").path+'/jc-run.sh'}
export PATH=\${JAVA_HOME}/bin:\${PATH}
            """
            UtFile.saveString(s, new File(wd("${rp.repos.reposDir}/jc-env.sh")))
        }
    }

    @CmDef(help = "Сборка и публикация документации")
    void cmPublish() {
        cm.exec("step-update-repos")
        cm.exec("step-create-jc-env")
        cm.exec("step-publish-doc")
    }

    @CmDef
    void step_publish_doc() {
        def rCore = rp.repos.getRepo("jandcode-core2-docs")
        ut.runcmd(cmd: "jc product", dir: rCore.path)

        def rJs = rp.repos.getRepo("jandcode-jsmodules")
        ut.runcmd(cmd: "jc build", dir: rJs.path)

        def rGh = rp.repos.getRepo("gkraser.github.io")

        publishDoc("${rGh.path}/jandcode-core2", "${rCore.path}/_jc/product")
        publishDoc("${rGh.path}/jandcode-jsmodules", "${rJs.path}/docs/temp/mdoc-doc")
    }

    void publishDoc(String destDir, String srcDir) {
        log.info("publish doc")
        log.info("   src: ${srcDir}")
        log.info("  dest: ${destDir}")
        String destVersion = rp.repos.loadVersion(destDir)
        String srcVersion = rp.repos.loadVersion(srcDir)
        if (destVersion == srcVersion) {
            log.info("version equals")
            return
        }
        log.info("copy...")
        ut.cleandir(destDir)
        ant.copy(todir: destDir) {
            fileset(dir: srcDir) {
                include(name: "**/*")
            }
        }
        log.info("git...")
        ut.runcmd(cmd: "git add .", dir: destDir)
        ut.runcmd(cmd: "git commit -m \"~~\"", dir: destDir)
        ut.runcmd(cmd: "git push", dir: destDir)
    }

}
